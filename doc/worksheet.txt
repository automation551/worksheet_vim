*worksheet.txt*     Worksheets (Log of interaction with an interpreter)
                    Author: Tom Link, micathom at gmail com

This plugin provides "worksheets". These are supposed to be somewhat 
similar to workbooks in mathematica or maple. Basically, they provide 
input fields and related output fields, plus some convenience functions 
to move around and deal with the data in the fields.

Currently supported types of worksheet/interpreters:
    - vim (surprise! :)
    - ruby (requires |+ruby|)
    - rubymath (ruby with mathn loaded and Math included)
    - sh (shell)
    - r_com (R, windows only, requires rdcom and |+ruby|)


-----------------------------------------------------------------------
Install~

Edit the vba file and type: >

    :so %

See :help vimball for details. If you have difficulties or use vim 7.0, 
please make sure, you have the current version of vimball
(vimscript #1502) installed or update your runtime.

This script requires hookcursormoved (vimscript #2037) to be installed.


========================================================================
Contents~

        g:worksheet_default ........................ |g:worksheet_default|
        g:worksheet_suffix ......................... |g:worksheet_suffix|
        g:worksheet_map ............................ |g:worksheet_map|
        :Worksheet ................................. |:Worksheet|
        :WorksheetRestore .......................... |:WorksheetRestore|
        :WorksheetSaveAs ........................... |:WorksheetSaveAs|
        :WorksheetEvaluateAll ...................... |:WorksheetEvaluateAll|
        :WorksheetExport ........................... |:WorksheetExport|
        u .......................................... |worksheet-map-u|
        <c-n> ...................................... |worksheet-map-<c-n>|
        <c-p> ...................................... |worksheet-map-<c-p>|
        <c-pagedown> ............................... |worksheet-map-<c-pagedown>|
        i_<c-pagedown> ............................. |worksheet-map-i_<c-pagedown>|
        <c-pageup> ................................. |worksheet-map-<c-pageup>|
        i_<c-pageup> ............................... |worksheet-map-i_<c-pageup>|
        <m-pagedown> ............................... |worksheet-map-<m-pagedown>|
        i_<m-pagedown> ............................. |worksheet-map-i_<m-pagedown>|
        <m-pageup> ................................. |worksheet-map-<m-pageup>|
        i_<m-pageup> ............................... |worksheet-map-i_<m-pageup>|
        <c-cr> ..................................... |worksheet-map-<c-cr>|
        i_<c-cr> ................................... |worksheet-map-i_<c-cr>|
        gi ......................................... |worksheet-map-gi|
        K .......................................... |worksheet-map-K|
        yc ......................................... |worksheet-map-yc|
        yo ......................................... |worksheet-map-yo|
        yin ........................................ |worksheet-map-yin|
        worksheet#Worksheet ........................ |worksheet#Worksheet()|
        worksheet#UseWorksheet ..................... |worksheet#UseWorksheet()|
        worksheet#Complete ......................... |worksheet#Complete()|
        worksheet#RestoreBuffer .................... |worksheet#RestoreBuffer()|
        worksheet#SetModifiable .................... |worksheet#SetModifiable()|
        worksheet#Restore .......................... |worksheet#Restore()|
        worksheet#SaveAs ........................... |worksheet#SaveAs()|
        worksheet#Export ........................... |worksheet#Export()|
        worksheet#Operator ......................... |worksheet#Operator()|
        worksheet#EvaluateLinesInWorksheet ......... |worksheet#EvaluateLinesInWorksheet()|
        worksheet#EvaluateAll ...................... |worksheet#EvaluateAll()|
        worksheet#Prototype ........................ |worksheet#Prototype()|
        prototype.BufJoin
        prototype.BufUnload
        prototype.NextEntry
        prototype.OtherEntry
        prototype.GotoEntry
        prototype.NextInputField
        prototype.CurrentEntryId
        prototype.Header
        prototype.NewEntry
        prototype.HeadOfEntry
        prototype.EndOfInput
        prototype.EndOfOutput
        prototype.PrepareInput
        prototype.Keyword
        prototype.SetInput
        prototype.Yank
        prototype.YankAll
        prototype.SwapEntries
        prototype.SilentInput
        prototype.Submit
        prototype.Evaluate
        worksheet#python#InitializeInterpreter ..... |worksheet#python#InitializeInterpreter()|
        worksheet#python#InitializeBuffer .......... |worksheet#python#InitializeBuffer()|
        g:worksheet#rcom#reuse ..................... |g:worksheet#rcom#reuse|
        prototype.Evaluate
        prototype.Keyword
        prototype.Quit
        worksheet#rcom#InitializeInterpreter ....... |worksheet#rcom#InitializeInterpreter()|
        worksheet#rcom#InitializeBuffer ............ |worksheet#rcom#InitializeBuffer()|
        prototype.Evaluate
        worksheet#ruby#InitializeInterpreter ....... |worksheet#ruby#InitializeInterpreter()|
        worksheet#ruby#InitializeBuffer ............ |worksheet#ruby#InitializeBuffer()|
        worksheet#rubymath#InitializeInterpreter ... |worksheet#rubymath#InitializeInterpreter()|
        worksheet#rubymath#InitializeBuffer ........ |worksheet#rubymath#InitializeBuffer()|
        prototype.Evaluate
        worksheet#sh#InitializeInterpreter ......... |worksheet#sh#InitializeInterpreter()|
        worksheet#sh#InitializeBuffer .............. |worksheet#sh#InitializeBuffer()|
        prototype.Evaluate
        worksheet#vim#InitializeInterpreter ........ |worksheet#vim#InitializeInterpreter()|
        worksheet#vim#InitializeBuffer ............. |worksheet#vim#InitializeBuffer()|
        prototype.Evaluate
        worksheet#vimeval#InitializeInterpreter .... |worksheet#vimeval#InitializeInterpreter()|
        worksheet#vimeval#InitializeBuffer ......... |worksheet#vimeval#InitializeBuffer()|


========================================================================
plugin/worksheet.vim~

                                                    *g:worksheet_default*
g:worksheet_default            (default: 'vim')
    The default worksheet type

                                                    *g:worksheet_suffix*
g:worksheet_suffix             (default: '.wks')
    The suffix for saved worksheets.
    TODO: If non-empty, this will also add a line to the filetypedetect 
    autogroup.

                                                    *g:worksheet_map*
g:worksheet_map                (default: '<Leader>x')
    @TPluginInclude

                                                    *:Worksheet*
:Worksheet [TYPE]
    Open a new worksheet.

                                                    *:WorksheetRestore*
:WorksheetRestore
    Restore a worksheet to the last know good state.

                                                    *:WorksheetSaveAs*
:WorksheetSaveAs
    :WorksheetSaveAs[!] [FILENAME]
    Save a worksheet to disk.
    By default worksheets are 'buftype'=nofile and 'noswapfile'.

                                                    *:WorksheetEvaluateAll*
:WorksheetEvaluateAll
    Evaluate all cells in the current worksheet.

                                                    *:WorksheetExport*
:WorksheetExport
    Export the input fields to a file.


========================================================================
ftplugin/worksheet.vim~


Maps:~

                                                    *worksheet-map-u*
u ... :setlocal modifiable<cr>u
    Undo

                                                    *worksheet-map-<c-n>*
<c-n> ... :call b:worksheet.NewEntry(1)<cr>
    Insert new entry below

                                                    *worksheet-map-<c-p>*
<c-p> ... :call b:worksheet.NewEntry(-1)<cr>
    Insert new entry above

                                                    *worksheet-map-<c-pagedown>*
<c-pagedown> ... :call b:worksheet.NextInputField(1, 0, 1)<cr>
    Goto next input field

                                                    *worksheet-map-i_<c-pagedown>*
i_<c-pagedown> ... <c-o>:call b:worksheet.NextInputField(1, 0, 1)<cr>

                                                    *worksheet-map-<c-pageup>*
<c-pageup> ... :call b:worksheet.NextInputField(-1, 0, 1)<cr>
    Goto previous input field

                                                    *worksheet-map-i_<c-pageup>*
i_<c-pageup> ... <c-o>:call b:worksheet.NextInputField(-1, 0, 1)<cr>

                                                    *worksheet-map-<m-pagedown>*
<m-pagedown> ... :call b:worksheet.SwapEntries(1)<cr>
    Swap with next entry

                                                    *worksheet-map-i_<m-pagedown>*
i_<m-pagedown> ... <c-o>:call b:worksheet.SwapEntries(1)<cr>

                                                    *worksheet-map-<m-pageup>*
<m-pageup> ... :call b:worksheet.SwapEntries(-1)<cr>
    Swap with previous entry

                                                    *worksheet-map-i_<m-pageup>*
i_<m-pageup> ... <c-o>:call b:worksheet.SwapEntries(-1)<cr>

                                                    *worksheet-map-<c-cr>*
<c-cr> ... :call b:worksheet.Submit()\|call b:worksheet.NextInputField(1, 1, 0)<cr>
    Submit the input to the interpreter

                                                    *worksheet-map-i_<c-cr>*
i_<c-cr> ... <c-o>:call b:worksheet.Submit()\|call b:worksheet.NextInputField(1, 1, 0)<cr>
    Submit the input to the interpreter

                                                    *worksheet-map-gi*
gi ... :call b:worksheet.GotoEntry(v:count1, 1, 0)\|:exec b:worksheet.EndOfInput()<cr>
    Go to entry |v:count|

                                                    *worksheet-map-K*
K ... :call b:worksheet.Keyword()<cr>

                                                    *worksheet-map-yc*
yc ... :call b:worksheet.Yank(v:count, 'string')<cr>
    Yank the input of the current or |v:count|'s entry to |quotequote|.

                                                    *worksheet-map-yo*
yo ... :call b:worksheet.Yank(v:count, 'output')<cr>
    Yank the output of the current or |v:count|'s entry to |quotequote|.

                                                    *worksheet-map-yin*
yin ... :call b:worksheet.YankAll()<cr>
    Yank all input fields.


========================================================================
autoload/worksheet.vim~

                                                    *worksheet#Worksheet()*
worksheet#Worksheet(...)
    Open a new worksheet.

                                                    *worksheet#UseWorksheet()*
worksheet#UseWorksheet(...)
    Open a new worksheet or use the current one.

                                                    *worksheet#Complete()*
worksheet#Complete(ArgLead, CmdLine, CursorPos)

                                                    *worksheet#RestoreBuffer()*
worksheet#RestoreBuffer()

                                                    *worksheet#SetModifiable()*
worksheet#SetModifiable(mode)

                                                    *worksheet#Restore()*
worksheet#Restore()

                                                    *worksheet#SaveAs()*
worksheet#SaveAs(bang, ...)

                                                    *worksheet#Export()*
worksheet#Export(filename)

                                                    *worksheet#Operator()*
worksheet#Operator(type)

                                                    *worksheet#EvaluateLinesInWorksheet()*
worksheet#EvaluateLinesInWorksheet(filetype, lines)

                                                    *worksheet#EvaluateAll()*
worksheet#EvaluateAll()

                                                    *worksheet#Prototype()*
worksheet#Prototype()


prototype.BufJoin


prototype.BufUnload


prototype.NextEntry


prototype.OtherEntry


prototype.GotoEntry


prototype.NextInputField


prototype.CurrentEntryId


prototype.Header


prototype.NewEntry


prototype.HeadOfEntry


prototype.EndOfInput


prototype.EndOfOutput


prototype.PrepareInput


prototype.Keyword


prototype.SetInput


prototype.Yank


prototype.YankAll


prototype.SwapEntries


prototype.SilentInput


prototype.Submit
    Special syntax:
    Last character is ";" ... silent
    Leading character is "%" ... comment


========================================================================
autoload/worksheet/python.vim~


prototype.Evaluate

                                                    *worksheet#python#InitializeInterpreter()*
worksheet#python#InitializeInterpreter(worksheet)

                                                    *worksheet#python#InitializeBuffer()*
worksheet#python#InitializeBuffer(worksheet)


========================================================================
autoload/worksheet/rcom.vim~

                                                    *g:worksheet#rcom#reuse*
g:worksheet#rcom#reuse         (default: 0)
    If non-null, reuse an already running instance or R GUI.
      0 ... Don't reuse a running instance of R
      1 ... Reuse a running R instance


prototype.Evaluate


prototype.Keyword


prototype.Quit

                                                    *worksheet#rcom#InitializeInterpreter()*
worksheet#rcom#InitializeInterpreter(worksheet)

                                                    *worksheet#rcom#InitializeBuffer()*
worksheet#rcom#InitializeBuffer(worksheet)


========================================================================
autoload/worksheet/ruby.vim~


prototype.Evaluate

                                                    *worksheet#ruby#InitializeInterpreter()*
worksheet#ruby#InitializeInterpreter(worksheet)

                                                    *worksheet#ruby#InitializeBuffer()*
worksheet#ruby#InitializeBuffer(worksheet)


========================================================================
autoload/worksheet/rubymath.vim~

                                                    *worksheet#rubymath#InitializeInterpreter()*
worksheet#rubymath#InitializeInterpreter(worksheet)

                                                    *worksheet#rubymath#InitializeBuffer()*
worksheet#rubymath#InitializeBuffer(worksheet)


========================================================================
autoload/worksheet/sh.vim~


prototype.Evaluate

                                                    *worksheet#sh#InitializeInterpreter()*
worksheet#sh#InitializeInterpreter(worksheet)

                                                    *worksheet#sh#InitializeBuffer()*
worksheet#sh#InitializeBuffer(worksheet)


========================================================================
autoload/worksheet/vim.vim~


prototype.Evaluate
    If the first character is "|", the input string will be processed with 
    |:execute|. Otherwise |eval()| will be used.

                                                    *worksheet#vim#InitializeInterpreter()*
worksheet#vim#InitializeInterpreter(worksheet)

                                                    *worksheet#vim#InitializeBuffer()*
worksheet#vim#InitializeBuffer(worksheet)


========================================================================
autoload/worksheet/vimeval.vim~


prototype.Evaluate
    If the first character is "|", the input string will be processed with 
    |:execute|. Otherwise |eval()| will be used.

                                                    *worksheet#vimeval#InitializeInterpreter()*
worksheet#vimeval#InitializeInterpreter(worksheet)

                                                    *worksheet#vimeval#InitializeBuffer()*
worksheet#vimeval#InitializeBuffer(worksheet)



vim:tw=78:fo=tcq2:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
